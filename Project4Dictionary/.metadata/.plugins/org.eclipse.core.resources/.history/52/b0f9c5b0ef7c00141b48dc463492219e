/**
 * 
 */

/**
 * @author Jason
 * @param <T>
 *
 */
public class StringAVL extends AVLTree<String>
{

	/**
	 * Constructor call to the parent's constructor to make a new AVLTree<String>
	 */
	public StringAVL()
	{super();} // End of constructor to make an empty StringAVL
	
	/**
	 * A public wrapper method to see whether the StringAVL contains the prefix
	 * @param prefix The prefix that is being checked
	 * @return Returns true if the prefix is found in the StringAVL, false if not found
	 */
	public boolean containsPrefix(String prefix)
	{return recContainsPrefix(prefix, root);} // End of the containsPrefix method
	
	/**
	 * TODO
	 * @param prefix
	 * @param current
	 * @return
	 */
	private boolean recContainsPrefix(String prefix, AVLNode<String> current)
	{
		// Base case
		if (current == null)
			return false;		
		// Recursive case
		else
		{
			// Case in which prefix length is less than the node length
			if (prefix.length() <= current.getData().length())
			{
				if (prefix.equalsIgnoreCase(current.getData().substring(0,prefix.length()))
						|| current.getData().equalsIgnoreCase(prefix.substring(0, current.getData().length())))
					return true;
				else
				{
					// Recursive call to the next
					
				}
			}
			// Case in which node data length is less than prefix length
			else
			{
				if ()
					return true;
				else
				{
					
				}
			}
		} // End of the recursive case
	} // End of the recursive containsPrefix method

} // End of the StringAVL Class
