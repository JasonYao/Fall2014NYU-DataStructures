import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;

/**
 * 
 */

/**
 * This class is to represent the Find Words Game, in which given a 
 * user's input, and a file output path in the commandline arguments,
 * outputs all possible combinations and permutations of the words
 * @author Jason
 *
 */
public class FindWordsGame
{
	/**
	 * @param args Commandline argument: directory path to 
	 */
	public static void main(String[] args)
	{
		PrintWriter pwOutput = null;
		Scanner userInput = null;
		try
		{
			// ---------- START OF FILE INPUT/OUTPUT PARSING ----------
			// Check 1: Checks to see if there is only 1 argument	
			if (args.length != 1)
			{throw new InvalidCommandLineArgumentException();}

			// Check 2: Checks to see if the file output exists
			File fileOutput = new File(args[0]); 
			if (!fileOutput.isFile())
			{throw new FileNotFoundException();}

			// Check 3: Checks to see if the output file's permissions allows for writing
			if (!fileOutput.canWrite())
			{throw new SecurityException();}


		} // End of the try block
		catch (InvalidCommandLineArgumentException e)
		{
			System.err.println("Error: Invalid number of "
					+ "commandline arguments, please only have one"
					+ " argument in the commandline");
		} // End of the catch block
		catch(FileNotFoundException e)
		{System.err.println("Error: The output file is missing or is a directory");}
		catch(SecurityException e)
		{System.err.println("Error: The ouput file's permissions do not allow for writing");}
		finally
		{
			// Closes the PrintWriter if it isn't null
			if (pwOutput != null)
			{pwOutput.close();}
			
			// Closes the userInput scanner if it is not closed
			if (userInput != null)
			{
				userInput.
			}
		} // End of the finally block


		// TODO Auto-generated method stub

	} // End of the main method

} // End of the FindWordsGame Class
