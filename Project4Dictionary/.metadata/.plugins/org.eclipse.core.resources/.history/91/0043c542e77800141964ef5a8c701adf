import java.util.Iterator;
import java.util.LinkedList;
import java.util.Stack;
import java.util.Queue;

/**
 * This class provides representation of an AVL self-balancing binary search tree.
 * @author Jason Yao
 * @author Joanna Klukowska
 * NOTE: The following code was taken from the Lecture 6 notes on BST trees, and adapted for the
 * purposes of this assignment.
 */
public class AVLTree <T extends Comparable<T>> implements Iterable<T>
{
	// Root of the tree
	private AVLNode<T> root;
	// Current number of nodes in the tree
	private int numOfElements;
	// Queue used for implementation of some of the methods below
	private Queue<T> queue;

	/**
	 * Instantiates an empty tree
	 */
	public AVLTree ()
	{this.root = null;
	numOfElements = 0;} // End of the constructor

	/**
	 * Add the given data item to the tree. If item is null, the tree does not change.
	 * @param item the new element to be added to the tree
	 */
	public void insert(T data)
	{
		if (data == null)
			return;
		if (root == null)
			// create a new node and make it the root the tree 
			root = new AVLNode<T>(data); 
		else {
			// Locate the parent node for the new node
			AVLNode<T> parent = null;
			AVLNode<T> current = root;
			// go down one of the branches of the tree until the
			// proper place for the new node is found
			while (current != null) {
				if (data.compareTo(current.getData()) < 0) {
					parent = current;
					current = current.getLeft();
				} else {
					parent = current;
					current = current.getRight();
				}
			}
			// Create the new node and attach it to the parent node
			if (data.compareTo(parent.getData()) < 0)
				parent.setLeft(new AVLNode<T>(data));
			else
				parent.setRight(new AVLNode<T>(data));
		}
		numOfElements++;
	} // End of the insert method

	/**
	 * Remove the item from the tree. 
	 * If item is null the tree remains unchanged. 
	 * If item is not found in the tree, the tree remains unchanged.  
	 * @param item
	 */
	public void remove(T data) {
		if (data == null)
			return;
		// Locate the node to be deleted and also locate its parent node
		AVLNode<T> parent = null;
		AVLNode<T> current = root;
		while (current != null) {
			if (data.compareTo(current.getData()) < 0) {
				parent = current;
				current = current.getLeft();
			} else if (data.compareTo(current.getData()) > 0) {
				parent = current;
				current = current.getRight();
			} else
				break; // Element is in the tree pointed at by current
		}

		if (current == null)
			return; // Element is not in the tree

		// Case 1: current has no left children
		if (current.getLeft() == null) {
			// Connect the parent with the right child of the current node
			if (parent == null) {
				root = current.getRight();
			} else {
				if (data.compareTo(parent.getData()) < 0)
					parent.setLeft(current.getRight());
				else
					parent.setRight(current.getRight());
			}
		} else {
			// Case 2: The current node has a left child
			// Locate the rightmost node in the left subtree of
			// the current node and also its parent
			AVLNode<T> parentOfRightMost = current;
			AVLNode<T> rightMost = current.getLeft();

			while (rightMost.getRight() != null) {
				parentOfRightMost = rightMost;
				rightMost = rightMost.getRight(); // Keep going to the right
			}

			// Replace the item in current by the item in rightMost
			current.setData(rightMost.getData());

			// Eliminate rightmost node
			if (parentOfRightMost.getRight() == rightMost)
				parentOfRightMost.setRight(rightMost.getLeft());
			else
				// Special case: parentOfRightMost == current
				parentOfRightMost.setLeft(rightMost.getLeft());
		}
		numOfElements--;
	} // End of the remove method

	/**
	 * Returns a reference to the item stored in this BST whose value is 
	 * equal to the value of the parameter.  
	 * @param item the value whose reference in the BST we are after
	 * @return null, if the node with value equal to item was not found, or a reference
	 * to that value if found
	 */
	public T get(T data) {
		AVLNode<T> current = root; // Start from the root
		if (data == null) return null;
		while (current != null) {
			if (data.compareTo(current.getData()) < 0) {
				current = current.getLeft();
			} else if (data.compareTo(current.getData()) > 0) {
				current = current.getRight();
			} else
				// element matches current.element
				return current.getData(); // Element is found
		}
		return null;
	} // End of the getData method


	/**
	 * Performs an inorder traversal of this BST and prints the results
	 * to standard output.  
	 */
	public void inOrder()
	{
		if (root != null) {
			Stack<AVLNode<T>> tmpStack = new Stack<AVLNode<T>>();
			queue = new LinkedList<T>();
			AVLNode<T> current = root;
			boolean done = false;
			int iterCounter = 0;

			System.out.printf(
					"iter: %2d current: %4s stack: %-12s processed: %s\n",
					iterCounter, current, tmpStack, queue);

			while (!done) {
				iterCounter++;
				if (current != null) {
					tmpStack.add(current);
					current = current.getLeft();
					System.out
					.printf("iter: %2d current: %4s stack: %-12s processed: %s\n",
							iterCounter, current, tmpStack, queue);
				} else if (!tmpStack.empty()) {
					current = tmpStack.pop();
					System.out
					.printf("iter: %2d current: %4s stack: %-12s processed: %s\n",
							iterCounter, current, tmpStack, queue);

					queue.add(current.getData());
					current = current.getRight();
					System.out
					.printf("iter: %2d current: %4s stack: %-12s processed: %s\n",
							iterCounter, current, tmpStack, queue);
				} else
					done = true;
			}
		}
	} // End of the inOrder traversal method

	/**
	 * Determines the number of elements stored in this BST. 
	 * @return number of elements in this BST
	 */
	public int size() {return numOfElements;} // End of the size method

	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	public String toString() {
		StringBuilder s = new StringBuilder();
		inOrderPrint(root, s);
		return s.toString();
	} // End of the toString method

	/*
	 * Computes a string representation of the this BST
	 * using its inorder traversal. 
	 * @param tree the root of the current subtree
	 * @param s the string that accumulated the string representation
	 * of this BST
	 */
	private void inOrderPrint(AVLNode<T> tree, StringBuilder s)
	{
		if (tree != null) {
			inOrderPrint(tree.getLeft(), s);
			s.append(tree.getData().toString() + "\n");
			inOrderPrint(tree.getRight(), s);
		}
	} // End of the inOrderPrint method

	/**
	 * TODO
	 * @param data
	 * @return
	 */
	public <E> E binarySearch(E data)
	{return data;}

	/**
	 * TODO
	 */
	@Override
	public Iterator<T> iterator() {
		// TODO Auto-generated method stub
		return null;
	} // End of the iterator method

	private void balance()
	{
		/**
		 * perform inorder traversal of the current tree and save the nodes
nodeList = currentTree.inorderTraversal()
create a new empty binary search tree called newBST
newBST = new BST();
call method insertAllNodes on the newBST as follows:
newBST.insertNodes( nodeList, 0, nodeList.size()-1 
		 */

	} // End of the balace tree method
	
	/**
	 * TODO
	 * @param n
	 * @return
	 */
	private int balanceFactor(AVLNode<T> n)
	{
		if (n.getRight() == null)
		{return - n.getHeight();}
		if (n.getLeft() == null)
		{return n.getHeight();}
		return n.getRight().getHeight() - n.getLeft().getHeight();
	} // End of the balanceFactor method
	
	/**
	 * TODO
	 * @param n
	 */
	public void updateHeight(AVLNode<T> n)
	{
		// Checks if node is a leaf
		if (n.getLeft() == null && n.getRight() == null)
		{n.setHeight(0);}
		// Checks if the node has a right child ONLY
		else if (n.getLeft() == null && n.getRight() != null)
		{n.setHeight(n.getRight().getHeight() + 1);}
		// Checks if the node has a left child ONLY
		else if (n.getRight() == null && n.getLeft() != null)
		{n.setHeight(n.getLeft().getHeight() + 1);}
		// Otherwise, it has two children
		else
		{n.setHeight(mac(n.getRight().getHeight(), n.getLeft().getHeight()) + 1);}
	} // End of the updateHeight method
	
	/**
	 * Rebalances the tree after there is an LL imbalance discovered
	 * @param nodeA The node that has the node imbalance
	 * @return Returns a reference to the new root of the subtree after LL rotation is done
	 */
	public AVLNode<T> balanceLL(AVLNode<T> nodeA)
	{
		AVLNode<T> nodeB = nodeA.getLeft();

		// Implements the rotations
		nodeA.setLeft(nodeB.getRight());
		nodeB.setRight(nodeA);

		// Updates all the heights
		updateHeight(nodeA);
		updateHeight(nodeB);
		return nodeB;
	} // End of the LL Rotation method

	/**
	 * Rebalances the tree after there is an RR imbalance discovered
	 * @param nodeA The node that has the node imbalance
	 * @return Returns a reference to the new root of the subtree after RR rotation is done
	 */
	public AVLNode<T> balanceRR(AVLNode<T> nodeA)
	{
		AVLNode<T> nodeB = nodeA.getRight();

		// Implements the rotations
		nodeA.setRight(nodeB.getLeft());
		nodeB.setLeft(nodeA);

		// Updates all the heights
		updateHeight(nodeA);
		updateHeight(nodeB);
		return nodeB;
	} // End of the RR rotation method

	/**
	 * Rebalances the tree after there is an LR imbalance discovered
	 * @param nodeA The node that has the node imbalance
	 * @return Returns a reference to the new root of the subtree after LR rotation is done
	 */
	public AVLNode<T> balanceLR(AVLNode<T> nodeA)
	{
		AVLNode<T> nodeB = nodeA.getLeft();
		AVLNode<T> nodeC = nodeB.getRight();

		// Implements the rotations
		nodeA.setLeft(nodeC.getRight());
		nodeB.setRight(nodeC.getLeft());
		nodeC.setLeft(nodeB);
		nodeC.setRight(nodeA);

		// Updates all the heights
		updateHeight(nodeA);
		updateHeight(nodeB);
		updateHeight(nodeC);

		return nodeC;
	} // End of the LR rotation method
	
	/**
	 * Rebalances the tree after there is an RL imbalance discovered
	 * @param nodeA The node that has the node imbalance
	 * @return Returns a reference to the new root of the subtree after RL rotation is done
	 */
	public AVLNode<E> balanceRL(AVLNode<E> nodeA)
	{
		AVLNode<E> nodeB = nodeA.getRight();
		AVLNode<E> nodeC = nodeB.getLeft();

		// Implements the rotations
		nodeA.setRight(nodeC.getLeft());
		nodeB.setLeft(nodeC.getRight());
		nodeC.setRight(nodeB);
		nodeC.setLeft(nodeA);

		// Updates all the heights
		updateHeight(nodeA);
		updateHeight(nodeB);
		updateHeight(nodeC);

		return nodeC;
	} // End of the RL rotation method
	
	

} // End of the AVLTree class
