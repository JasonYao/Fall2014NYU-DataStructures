import java.util.Iterator;
import java.util.LinkedList;
import java.util.Stack;
import java.util.Queue;

/**
 * This class provides representation of an AVL self-balancing binary search tree.
 * @author Jason Yao
 * @author Joanna Klukowska
 * NOTE: The following code was taken from the Lecture 6 notes on BST trees, and adapted for the
 * purposes of this assignment.
 */
public class AVLTree <T extends Comparable<T>> implements Iterable<T>
{
	// Root of the tree
	private AVLNode<T> root;
	// Current number of nodes in the tree
	private int numOfElements;
	// Queue used for implementation of some of the methods below
	private Queue<T> queue;

	/**
	 * Instantiates an empty tree
	 */
	public AVLTree ()
	{this.root = null;
	numOfElements = 0;} // End of the constructor

	/**
	 * Wrapper method to add a given data item to the tree
	 * @param item the new element to be added to the tree
	 */
	public void insert(T data)
	{
		if (data!=null)
			root = recInsert(data, root);
	} // End of the insert wrapper method

	/**
	 * Recursively adds an item to the AVL tree
	 * @param data data to be added
	 * @param root tree root of the subtree into which the node will be added
	 * @return Returns the reference to the AVLNode after the item has been inserted
	 */
	private AVLNode<T> recInsert(T data, AVLNode<T> tree)
	{
		if (tree == null) {
			// Addition place found
			tree = new AVLNode<T>(data);
			numOfElements++;} 
		else if (data.compareTo(tree.getData()) <= 0)
			// Add in left subtree
			tree.setLeft(recInsert(data, tree.getLeft()));
		else
			// Add in right subtree
			tree.setRight(recInsert(data, tree.getRight()));
		return tree;
	} // ENd of the recursive insert method

	/**
	 * Wrapper method to remove the item from the tree. 
	 * If item is null the tree remains unchanged. 
	 * If item is not found in the tree, the tree remains unchanged.  
	 * @param data
	 */
	public void remove(T data)
	{
		if (data != null)
			root = recRemove(data, root);
	} // End of the wrapper of the remove method
	
	private AVLNode<T> recRemove(T data, AVLNode<T> tree)
	{
		
	}

	/**
	 * Returns a reference to the item stored in this BST whose value is 
	 * equal to the value of the parameter.  
	 * @param item the value whose reference in the BST we are after
	 * @return null, if the node with value equal to item was not found, or a reference
	 * to that value if found
	 */
	public T get(T data) {
		AVLNode<T> current = root; // Start from the root
		if (data == null) return null;
		while (current != null) {
			if (data.compareTo(current.getData()) < 0) {
				current = current.getLeft();
			} else if (data.compareTo(current.getData()) > 0) {
				current = current.getRight();
			} else
				// element matches current.element
				return current.getData(); // Element is found
		}
		return null;
	} // End of the getData method


	/**
	 * Performs an inorder traversal of this BST and prints the results
	 * to standard output.  
	 */
	public void inOrder()
	{
		if (root != null) {
			Stack<AVLNode<T>> tmpStack = new Stack<AVLNode<T>>();
			queue = new LinkedList<T>();
			AVLNode<T> current = root;
			boolean done = false;
			int iterCounter = 0;

			System.out.printf(
					"iter: %2d current: %4s stack: %-12s processed: %s\n",
					iterCounter, current, tmpStack, queue);

			while (!done) {
				iterCounter++;
				if (current != null) {
					tmpStack.add(current);
					current = current.getLeft();
					System.out
					.printf("iter: %2d current: %4s stack: %-12s processed: %s\n",
							iterCounter, current, tmpStack, queue);
				} else if (!tmpStack.empty()) {
					current = tmpStack.pop();
					System.out
					.printf("iter: %2d current: %4s stack: %-12s processed: %s\n",
							iterCounter, current, tmpStack, queue);

					queue.add(current.getData());
					current = current.getRight();
					System.out
					.printf("iter: %2d current: %4s stack: %-12s processed: %s\n",
							iterCounter, current, tmpStack, queue);
				} else
					done = true;
			}
		}
	} // End of the inOrder traversal method

	/**
	 * Determines the number of elements stored in this BST. 
	 * @return number of elements in this BST
	 */
	public int size() {return numOfElements;} // End of the size method

	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	public String toString() {
		StringBuilder s = new StringBuilder();
		inOrderPrint(root, s);
		return s.toString();
	} // End of the toString method

	/*
	 * Computes a string representation of the this BST
	 * using its inorder traversal. 
	 * @param tree the root of the current subtree
	 * @param s the string that accumulated the string representation
	 * of this BST
	 */
	private void inOrderPrint(AVLNode<T> tree, StringBuilder s)
	{
		if (tree != null) {
			inOrderPrint(tree.getLeft(), s);
			s.append(tree.getData().toString() + "\n");
			inOrderPrint(tree.getRight(), s);
		}
	} // End of the inOrderPrint method

	/**
	 * TODO
	 * @param data
	 * @return
	 */
	public <E> E binarySearch(E data)
	{return data;} // TODO

	/**
	 * TODO
	 */
	@Override
	public Iterator<T> iterator() {
		// TODO Auto-generated method stub
		return null;
	} // End of the iterator method

	/**
	 * TODO
	 * @param n
	 * @return
	 */
	private int balanceFactor(AVLNode<T> n)
	{
		if (n.getRight() == null)
		{return - n.getHeight();}
		if (n.getLeft() == null)
		{return n.getHeight();}
		return n.getRight().getHeight() - n.getLeft().getHeight();
	} // End of the balanceFactor method

	/**
	 * TODO
	 * @param n
	 */
	public void updateHeight(AVLNode<T> n)
	{
		// Checks if node is a leaf
		if (n.getLeft() == null && n.getRight() == null)
		{n.setHeight(0);}
		// Checks if the node has a right child ONLY
		else if (n.getLeft() == null && n.getRight() != null)
		{n.setHeight(n.getRight().getHeight() + 1);}
		// Checks if the node has a left child ONLY
		else if (n.getRight() == null && n.getLeft() != null)
		{n.setHeight(n.getLeft().getHeight() + 1);}
		// Otherwise, it has two children
		else
		{n.setHeight(mac(n.getRight().getHeight(), n.getLeft().getHeight()) + 1);}
	} // End of the updateHeight method

	/**
	 * Rebalances the tree after there is an LL imbalance discovered
	 * @param nodeA The node that has the node imbalance
	 * @return Returns a reference to the new root of the subtree after LL rotation is done
	 */
	public AVLNode<T> balanceLL(AVLNode<T> nodeA)
	{
		AVLNode<T> nodeB = nodeA.getLeft();

		// Implements the rotations
		nodeA.setLeft(nodeB.getRight());
		nodeB.setRight(nodeA);

		// Updates all the heights
		updateHeight(nodeA);
		updateHeight(nodeB);
		return nodeB;
	} // End of the LL Rotation method

	/**
	 * Rebalances the tree after there is an RR imbalance discovered
	 * @param nodeA The node that has the node imbalance
	 * @return Returns a reference to the new root of the subtree after RR rotation is done
	 */
	public AVLNode<T> balanceRR(AVLNode<T> nodeA)
	{
		AVLNode<T> nodeB = nodeA.getRight();

		// Implements the rotations
		nodeA.setRight(nodeB.getLeft());
		nodeB.setLeft(nodeA);

		// Updates all the heights
		updateHeight(nodeA);
		updateHeight(nodeB);
		return nodeB;
	} // End of the RR rotation method

	/**
	 * Rebalances the tree after there is an LR imbalance discovered
	 * @param nodeA The node that has the node imbalance
	 * @return Returns a reference to the new root of the subtree after LR rotation is done
	 */
	public AVLNode<T> balanceLR(AVLNode<T> nodeA)
	{
		AVLNode<T> nodeB = nodeA.getLeft();
		AVLNode<T> nodeC = nodeB.getRight();

		// Implements the rotations
		nodeA.setLeft(nodeC.getRight());
		nodeB.setRight(nodeC.getLeft());
		nodeC.setLeft(nodeB);
		nodeC.setRight(nodeA);

		// Updates all the heights
		updateHeight(nodeA);
		updateHeight(nodeB);
		updateHeight(nodeC);

		return nodeC;
	} // End of the LR rotation method

	/**
	 * Rebalances the tree after there is an RL imbalance discovered
	 * @param nodeA The node that has the node imbalance
	 * @return Returns a reference to the new root of the subtree after RL rotation is done
	 */
	public AVLNode<T> balanceRL(AVLNode<T> nodeA)
	{
		AVLNode<T> nodeB = nodeA.getRight();
		AVLNode<T> nodeC = nodeB.getLeft();

		// Implements the rotations
		nodeA.setRight(nodeC.getLeft());
		nodeB.setLeft(nodeC.getRight());
		nodeC.setRight(nodeB);
		nodeC.setLeft(nodeA);

		// Updates all the heights
		updateHeight(nodeA);
		updateHeight(nodeB);
		updateHeight(nodeC);

		return nodeC;
	} // End of the RL rotation method
} // End of the AVLTree class
