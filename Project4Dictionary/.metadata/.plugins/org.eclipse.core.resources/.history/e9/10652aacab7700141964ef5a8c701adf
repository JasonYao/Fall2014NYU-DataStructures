/**
 * 
 */

/**
 * AVLNode class is used to represent nodes in a self-balancing binary search tree.
 * It contains a data item that has to implement Comparable interface
 * and references to left and right subtrees. 
 * @author Jason
 * @param <E> a reference type that implements Comparable<E> interface 
 * NOTE: Based off of the Lecture 6 sourcecode, by Joanna Klukowska
 */
public class AVLNode <E extends Comparable<E>> implements Comparable<AVLNode<E>>
{
	//reference to the left subtree 
		private AVLNode <E> left;
		//reference to the right subtree
		private AVLNode <E> right;
		//data item stored in the node
		private E data;
		
		/**
		 * Constructs a BSTNode initializing the data part 
		 * according to the parameter and setting both 
		 * references to subtrees to null.
		 * @param data
		 *    data to be stored in the node
		 */
		public AVLNode(E data) {
			this.data = data;
			left = null;
			right = null;
		}
		
		/**
		 * Constructs a BSTNode initializing the data part
		 * and the subtree references according to the parameters.
		 * @param data
		 *    data to be stored in the node
		 * @param left
		 *    reference to the left subtree
		 * @param right
		 *    reference to the right subtree
		 */
		public AVLNode( E data, BSTNode<E> left, BSTNode<E> right) {
			this.left = left;
			this.right = right;
			this.data = data;
		}

		/**
		 * Left subtree accessor. 
		 * @return 
		 *    reference to the left subtree of a node
		 */
		public BSTNode<T> getLeft() {
			return left;
		}
		
		/**
		 * Changes the reference to the left subtree to the one 
		 * specified in the parameter.
		 * @param 
		 *    reference to the new left subtree of the node.
		 */
		public void setLeft(BSTNode<T> left) {
			this.left = left;
		}
		
		/**
		 * Right subtree accessor. 
		 * @return 
		 *    reference to the right subtree of a node
		 */
		public BSTNode<T> getRight() {
			return right;
		}
		
		/**
		 * Changes the reference to the right subtree to the one 
		 * specified in the parameter.
		 * @param 
		 *    reference to the new right subtree of the node.
		 */
		public void setRight(BSTNode<T> right) {
			this.right = right;
		}
		
		/**
		 * Returns a reference to the data stored in the node. 
		 * @return 
		 *    reference to the data stored in the node
		 */
		public T getData() {
			return data;
		}
		/**
		 * Changes the data stored in the node to the one 
		 * specified in the parameter.
		 * @param 
		 *    reference to the new data of the node
		 */
		public void setData(T data) {
			this.data = data;
		}

		/* (non-Javadoc)
		 * @see java.lang.Comparable#compareTo(java.lang.Object)
		 */
		@Override
		public int compareTo(BSTNode<T> other) {
			return this.data.compareTo(other.data);
		} 

		/* (non-Javadoc)
		 * @see java.lang.Object#toString()
		 */
		@Override
		public String toString() {
			return data.toString();
		}

	@Override
	public int compareTo(AVLNode<E> o) {
		// TODO Auto-generated method stub
		return 0;
	}

}
