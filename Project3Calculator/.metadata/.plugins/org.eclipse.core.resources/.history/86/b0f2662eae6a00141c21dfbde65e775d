import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;

/**
 * This class is responsible for all input and output operations, including input validation
 * @author Jason
 */
public class ConsoleCalculator
{
	/**
	 * Main method that takes in a file input and a file output argument, with the file input
	 * containing line-delinated mathematical expressions. The output file will contain
	 * line-delinated mathematical answers to those expressions, unless the expression is
	 * invalid, in which case it will have INVALID for that line.
	 * @param args The path to the input file, then a space, and then the path to the output file
	 * @throws FileNotFoundException The file could not be found, or is a directory
	 * @throws InvalidCommandLineArgumentException There was an issue with the command line arguments
	 * @throws SecurityException The file could not be read from, or written to
	 */
	public static void main(String[] args) throws FileNotFoundException, 
	InvalidCommandLineArgumentException, SecurityException
	{
		Scanner inputScanner = null;
		PrintWriter pwOutput = null;
		try
		{
			// ---------- START OF FILE INPUT/OUTPUT PARSING ----------
			// Check 1: Checks to see if there is only 2 arguments			
			if (args.length != 2)
			{throw new InvalidCommandLineArgumentException();}

			// Check 2: Checks to see if the file output exists
			File expressionEvaluationOutput = new File(args[1]); 
			if (!expressionEvaluationOutput.isFile())
			{throw new FileNotFoundException("Error: The output file is missing or is a directory");}

			// Check 2.5: Checks to see if the file input exists
			File expressionEvaluationInput = new File(args[0]); 
			if (!expressionEvaluationInput.isFile())
			{throw new FileNotFoundException("Error: The input file is missing or is a directory");}

			// Checks to see if the input file can be read from - note that the checks are separate so the error messages
			// are handled differently, since SecurityException can't be overridden
			try
			{
				// Check 3: Checks to see if the input file's permissions allow for reading
				SecurityManager inputSecurity = System.getSecurityManager();
				if (inputSecurity!= null) {
					inputSecurity.checkRead(args[0]); // Throws SecurityException if the file cannot be read from
				}
			}
			catch (SecurityException e)
			{System.err.println("Error: The input file's permissions do not allow for file reading");}

			// Check 3.5: Checks to see if the output file's permissions allows for writing
			pwOutput = new PrintWriter(expressionEvaluationInput); // Throws SecurityException if the file cannot be written to
			// ---------- END OF FILE INPUT/OUTPUT PARSING ----------

			// ---------- START OF INPUT FILE VALIDATION ----------
			inputScanner = new Scanner(expressionEvaluationInput);

			// Goes through the file, validating each line of the file
			while (inputScanner.hasNextLine())
			{
				// Case 1: line is prefix
				if (isPostfix(inputScanner.nextLine()) == false)
				{
					// Converts the line to postfix
					
					// Evaluates the postfix expression
					
					// Writes the evaluation to the output file
					pwOutput.println(x);
				}
				// Case 2: line is postfix
				else
				{
					// Evaluates the postfix expression
					
					// Writes the evaluation to the output file

				}
				inputScanner.nextLine();

			}
			// ---------- END OF INPUT FILE VALIDATION ----------
		} // End of try block
		catch (InvalidCommandLineArgumentException e)
		{System.err.println("Error: invalid command line arguments - please have one input and one output file path argument");}
		catch (FileNotFoundException e)
		{System.err.println(e.getMessage());}
		catch (SecurityException e)
		{System.err.println("Error: The output file's permissions do not allow for file writing");}

		finally
		{
			// Checks to see if the scanner needs to be closed
			if (inputScanner != null)
			{inputScanner.close();}
			// Checks to see if the PrintWriter needs to be closed
			if (pwOutput != null)
			{pwOutput.close();}
		} // End of the finally block
	} // End of the main method
	
	
	private static boolean isPostfix(String input)
	{
		return true; // TODO change this
	}
} // End of the Calculator class
